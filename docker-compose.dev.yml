version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: vehicle-tracker-db-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-vehicle_tracker_dev}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./server/database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-vehicle_tracker_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (Development)
  api:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: vehicle-tracker-api-dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 5000
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-vehicle_tracker_dev}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      JWT_SECRET: ${JWT_SECRET:-dev-jwt-secret-key}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24h}
      UPLOAD_DIR: /app/uploads
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-10485760}
      CORS_ORIGIN: http://localhost:3000
    volumes:
      - ./server:/app
      - /app/node_modules
      - uploads_dev_data:/app/uploads
    ports:
      - "5000:5000"
    depends_on:
      db:
        condition: service_healthy
    command: npm run dev

  # Frontend (Development)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend.dev
    container_name: vehicle-tracker-frontend-dev
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:5000
    volumes:
      - ./client:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - api
    command: npm start

volumes:
  postgres_dev_data:
    driver: local
  uploads_dev_data:
    driver: local

networks:
  default:
    name: vehicle-tracker-dev-network